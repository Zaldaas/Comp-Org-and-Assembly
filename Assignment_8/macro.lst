     1                                 %line 1+1 macro.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 
    22                                 
    23                                 
    24                                 
    25                                 
    26                                 
    27                                 
    28                                 
    29                                 
    30                                 
    31                                 
    32                                 
    33                                 
    34                                 
    35                                 
    36                                 
    37                                 
    38                                 %line 44+1 macro.asm
    39                                 
    40                                 %line 52+1 macro.asm
    41                                 
    42                                 [section .bss]
    43 00000000 <gap>                  buffer resb 4
    44 00000004 <gap>                  n resd 1
    45 00000008 <gap>                  sumN resd 1
    46 0000000C <gap>                  ascii resb 10
    47                                 
    48                                 [section .data]
    49                                 LF equ 10
    50                                 NULL equ 0
    51                                 SYS_exit equ 60
    52                                 EXIT_SUCCESS equ 0
    53 00000000 496E7075742061206E-    msg1 db "Input a number (004~999): ", NULL
    54 00000000 756D62657220283030-
    55 00000000 347E393939293A2000 
    56 0000001B 31202B2032202B2033-    msg2 db "1 + 2 + 3 +...+ ", NULL
    57 0000001B 202B2E2E2E2B2000   
    58 0000002C 203D2000               msg3 db " = ", NULL
    59                                 
    60                                 [section .text]
    61                                 [global _start]
    62                                 _start:
    63 00000000 48C7C001000000          mov rax, 1
    64                                 %line 71+0 macro.asm
    65 00000007 48C7C701000000          mov rdi, 1
    66 0000000E 48C7C6[00000000]        mov rsi, msg1
    67 00000015 48C7C21A000000          mov rdx, 26
    68 0000001C 0F05                    syscall
    69                                 %line 72+1 macro.asm
    70 0000001E 48C7C000000000          mov rax, 0
    71                                 %line 72+0 macro.asm
    72 00000025 48C7C700000000          mov rdi, 0
    73 0000002C 48C7C6[00000000]        mov rsi, buffer
    74 00000033 48C7C204000000          mov rdx, 4
    75 0000003A 0F05                    syscall
    76                                 %line 73+1 macro.asm
    77 0000003C B800000000              mov eax, 0
    78 00000041 BB0A000000              mov ebx, 10
    79 00000046 48C7C600000000          mov rsi, 0
    80                                 inputLoop:
    81 0000004D 80A6[00000000]0F        and byte[buffer+rsi], 0f
    82 00000054 0286[00000000]          add al, byte[buffer+rsi]
    83 0000005A 80D400                  adc ah, 0
    84 0000005D 4883FE02                cmp rsi, 2
    85 00000061 7400                    je skipMul
    86 00000063 F7E3                    mul ebx
    87                                 skipMul:
    88 00000065 48FFC6                  inc rsi
    89 00000068 4883FE03                cmp rsi, 3
    90 0000006C 7CDD                    jl inputLoop
    91 0000006E 890425[00000000]        mov dword[n], eax
    92                                 
    93 00000075 48C7C600000000          mov rsi, 0
    94                                 restoreLoop:
    95 0000007C 8A86[00000000]          mov al, byte[buffer+rsi]
    96 00000082 0C30                    or al, 30
    97 00000084 8886[00000000]          mov byte[buffer+rsi], al
    98 0000008A 48FFC6                  inc rsi
    99 0000008D 4883FE03                cmp rsi, 3
   100 00000091 7CE7                    jl restoreLoop
   101                                 
   102                                 
   103 00000093 B900000000              mov ecx, 0
   104                                 sumLoop:
   105 00000098 010C25[00000000]        add dword[sumN], ecx
   106 0000009F FFC1                    inc ecx
   107 000000A1 3B0C25[00000000]        cmp ecx, dword[n]
   108 000000A8 76EC                    jbe sumLoop
   109                                 
   110                                 
   111                                 
   112 000000AA 8B0425[00000000]        mov eax, dword[sumN]
   113 000000B1 48C7C100000000          mov rcx, 0
   114 000000B8 BB0A000000              mov ebx, 10
   115                                 divideLoop:
   116 000000BD BA00000000              mov edx, 0
   117 000000C2 F7F3                    div ebx
   118 000000C4 52                      push rdx
   119 000000C5 48FFC1                  inc rcx
   120 000000C8 83F800                  cmp eax, 0
   121 000000CB 75EE                    jne divideLoop
   122                                 
   123                                 
   124 000000CD 48C7C3[00000000]        mov rbx, ascii
   125 000000D4 48C7C700000000          mov rdi, 0
   126                                 popLoop:
   127 000000DB 58                      pop rax
   128 000000DC 0430                    add al, "0"
   129 000000DE 88043B                  mov byte [rbx+rdi], al
   130 000000E1 48FFC7                  inc rdi
   131 000000E4 E2F3                    loop popLoop
   132 000000E6 C6043B0A                mov byte [rbx+rdi], LF
   133                                 
   134 000000EA 48C7C001000000          mov rax, 1
   135                                 %line 130+0 macro.asm
   136 000000F1 48C7C701000000          mov rdi, 1
   137 000000F8 48C7C6[00000000]        mov rsi, msg2
   138 000000FF 48C7C210000000          mov rdx, 16
   139 00000106 0F05                    syscall
   140                                 %line 131+1 macro.asm
   141 00000108 48C7C001000000          mov rax, 1
   142                                 %line 131+0 macro.asm
   143 0000010F 48C7C701000000          mov rdi, 1
   144 00000116 48C7C6[00000000]        mov rsi, buffer
   145 0000011D 48C7C203000000          mov rdx, 3
   146 00000124 0F05                    syscall
   147                                 %line 132+1 macro.asm
   148 00000126 48C7C001000000          mov rax, 1
   149                                 %line 132+0 macro.asm
   150 0000012D 48C7C701000000          mov rdi, 1
   151 00000134 48C7C6[00000000]        mov rsi, msg3
   152 0000013B 48C7C203000000          mov rdx, 3
   153 00000142 0F05                    syscall
   154                                 %line 133+1 macro.asm
   155 00000144 48C7C001000000          mov rax, 1
   156                                 %line 133+0 macro.asm
   157 0000014B 48C7C701000000          mov rdi, 1
   158 00000152 48C7C6[00000000]        mov rsi, ascii
   159 00000159 48C7C207000000          mov rdx, 7
   160 00000160 0F05                    syscall
   161                                 %line 134+1 macro.asm
   162                                 
   163 00000162 48C7C03C000000          mov rax, SYS_exit
   164 00000169 48C7C700000000          mov rdi, EXIT_SUCCESS
   165 00000170 0F05                    syscall
