     1                                 %line 1+1 calculator.asm
     2                                 
     3                                 
     4                                 [section .bss]
     5 00000000 <gap>                  input resb 256
     6 00000100 <gap>                  result resd 1
     7                                 
     8                                 [section .data]
     9                                 LF equ 10
    10                                 NULL equ 0
    11                                 SYS_exit equ 60
    12                                 EXIT_SUCCESS equ 0
    13 00000000 456E746572204F7065-    prompt db "Enter Operations String: ", ' ', NULL
    14 00000000 726174696F6E732053-
    15 00000000 7472696E673A202000 
    16 0000001B 4572726F723A20496E-    invalid_error db "Error: Invalid input", NULL
    17 0000001B 76616C696420696E70-
    18 0000001B 757400             
    19 00000030 4572726F723A204E65-    negative_error db "Error: Negative result", NULL
    20 00000030 676174697665207265-
    21 00000030 73756C7400         
    22 00000047 4572726F723A204469-    div_zero_error db "Error: Division by zero", NULL
    23 00000047 766973696F6E206279-
    24 00000047 207A65726F00       
    25 0000005F 4572726F723A204F76-    overflow_error db "Error: Overflow", NULL
    26 0000005F 6572666C6F7700     
    27 0000006F 0A00                   newline db LF, NULL
    28 00000071 203D2000               equation_equals db " = ", NULL
    29                                 
    30                                 [section .text]
    31                                 [global _start]
    32                                 
    33                                 _start:
    34                                 
    35 00000000 B804000000              mov eax, 4
    36 00000005 BB01000000              mov ebx, 1
    37 0000000A B9[00000000]            mov ecx, prompt
    38 0000000F BA19000000              mov edx, 25
    39 00000014 CD80                    int 0x80
    40                                 
    41                                 
    42 00000016 B803000000              mov eax, 3
    43 0000001B BB00000000              mov ebx, 0
    44 00000020 B9[00000000]            mov ecx, input
    45 00000025 BA00010000              mov edx, 256
    46 0000002A CD80                    int 0x80
    47                                 
    48                                 
    49 0000002C BE[00000000]            mov esi, input
    50 00000031 E89A000000              call next_number
    51 00000036 890425[00000000]        mov [result], eax
    52                                 
    53                                 parse_loop:
    54                                 
    55 0000003D AC                      lodsb
    56 0000003E 3C0A                    cmp al, 10
    57 00000040 0F84A0000000            je print_result
    58 00000046 3C00                    cmp al, 0
    59 00000048 0F8498000000            je print_result
    60                                 
    61                                 
    62 0000004E E8FDFFFFFF              call evaluate_operation
    63 00000053 EBE6                    jmp parse_loop
    64                                 
    65                                 evaluate_operation:
    66 00000055 3C2B                    cmp al, '+'
    67 00000057 740F                    je add_operation
    68 00000059 3C2D                    cmp al, '-'
    69 0000005B 741E                    je sub_operation
    70 0000005D 3C2A                    cmp al, '*'
    71 0000005F 742D                    je mul_operation
    72 00000061 3C2F                    cmp al, '/'
    73 00000063 7446                    je div_operation
    74 00000065 E945010000              jmp error
    75                                 
    76                                 add_operation:
    77 0000006A E861000000              call next_number
    78 0000006F 010425[00000000]        add [result], eax
    79 00000076 0F8090010000            jo overflow_output
    80 0000007C C3                      ret
    81                                 
    82                                 sub_operation:
    83 0000007D E84E000000              call next_number
    84 00000082 290425[00000000]        sub [result], eax
    85 00000089 0F807D010000            jo overflow_output
    86 0000008F C3                      ret
    87                                 
    88                                 mul_operation:
    89 00000090 E83B000000              call next_number
    90 00000095 8B1C25[00000000]        mov ebx, [result]
    91 0000009C 0FAFD8                  imul ebx, eax
    92 0000009F 0F8067010000            jo overflow_output
    93 000000A5 891C25[00000000]        mov [result], ebx
    94 000000AC C3                      ret
    95                                 
    96                                 div_operation:
    97 000000AD E81E000000              call next_number
    98 000000B2 89C3                    mov ebx, eax
    99 000000B4 85DB                    test ebx, ebx
   100 000000B6 0F8433010000            jz div_zero_output
   101                                 
   102 000000BC 8B0425[00000000]        mov eax, [result]
   103 000000C3 31D2                    xor edx, edx
   104 000000C5 F7F3                    div ebx
   105 000000C7 0F803F010000            jo overflow_output
   106 000000CD 890425[00000000]        mov [result], eax
   107 000000D4 C3                      ret
   108                                 
   109                                 next_number:
   110                                 
   111 000000D5 AC                      lodsb
   112 000000D6 2C30                    sub al, '0'
   113 000000D8 3C00                    cmp al, 0
   114 000000DA 0F8CCE000000            jl error
   115 000000E0 3C09                    cmp al, 9
   116 000000E2 0F8FC6000000            jg error
   117 000000E8 0FB6C0                  movzx eax, al
   118 000000EB C3                      ret
   119                                 
   120                                 print_result:
   121                                 
   122 000000EC BE[00000000]            mov esi, input
   123 000000F1 BB00010000              mov ebx, 256
   124                                 
   125                                 find_end_of_input:
   126 000000F6 67803E0A                cmp byte [esi], 10
   127 000000FA 740A                    je newline_found
   128 000000FC 67803E00                cmp byte [esi], 0
   129 00000100 740A                    je end_of_input_found
   130 00000102 FFC6                    inc esi
   131 00000104 FFCB                    dec ebx
   132 00000106 75EC                    jnz find_end_of_input
   133                                 
   134                                 newline_found:
   135 00000108 67C60600                mov byte [esi], 0
   136 0000010C FFCE                    dec esi
   137                                 
   138                                 end_of_input_found:
   139                                 
   140 0000010E FFC6                    inc esi
   141 00000110 89F2                    mov edx, esi
   142 00000112 81EA[00000000]          sub edx, input
   143                                 
   144                                 
   145 00000118 B804000000              mov eax, 4
   146 0000011D BB01000000              mov ebx, 1
   147 00000122 B9[00000000]            mov ecx, input
   148 00000127 CD80                    int 0x80
   149                                 
   150                                 
   151 00000129 B804000000              mov eax, 4
   152 0000012E BB01000000              mov ebx, 1
   153 00000133 B9[00000000]            mov ecx, equation_equals
   154 00000138 BA03000000              mov edx, 3
   155 0000013D CD80                    int 0x80
   156                                 
   157                                 
   158 0000013F 8B0425[00000000]        mov eax, [result]
   159 00000146 83F800                  cmp eax, 0
   160 00000149 0F8C83000000            jl negative_output
   161 0000014F E800000000              call print_integer
   162 00000154 E9D1000000              jmp exit_program
   163                                 
   164                                 print_integer:
   165                                 
   166 00000159 BF0A000000              mov edi, 10
   167 0000015E B9[01000000]            mov ecx, newline + 1
   168 00000163 67C60100                mov byte [ecx], 0
   169                                 
   170                                 print_integer_loop:
   171 00000167 31D2                    xor edx, edx
   172 00000169 F7F7                    div edi
   173 0000016B 80C230                  add dl, '0'
   174 0000016E FFC9                    dec ecx
   175 00000170 678811                  mov [ecx], dl
   176 00000173 85C0                    test eax, eax
   177 00000175 75EE                    jnz print_integer_loop
   178                                 
   179                                 
   180 00000177 C60425[01000000]0A      mov byte [newline + 1], 10
   181 0000017F C60425[02000000]00      mov byte [newline + 2], 0
   182                                 
   183                                 
   184 00000187 B804000000              mov eax, 4
   185 0000018C BB01000000              mov ebx, 1
   186 00000191 8D1425[03000000]        lea edx, [newline + 3]
   187 00000198 29CA                    sub edx, ecx
   188 0000019A CD80                    int 0x80
   189 0000019C C3                      ret
   190                                 
   191                                 print_error_newline:
   192 0000019D B804000000              mov eax, 4
   193 000001A2 BB01000000              mov ebx, 1
   194 000001A7 B9[00000000]            mov ecx, newline
   195 000001AC BA01000000              mov edx, 1
   196 000001B1 CD80                    int 0x80
   197 000001B3 C3                      ret
   198                                 
   199                                 error:
   200                                 
   201 000001B4 B804000000              mov eax, 4
   202 000001B9 BB01000000              mov ebx, 1
   203 000001BE B9[00000000]            mov ecx, invalid_error
   204 000001C3 BA14000000              mov edx, 20
   205 000001C8 CD80                    int 0x80
   206 000001CA E8C9FFFFFF              call print_error_newline
   207 000001CF B801000000              mov eax, 1
   208 000001D4 31DB                    xor ebx, ebx
   209 000001D6 CD80                    int 0x80
   210                                 
   211                                 negative_output:
   212 000001D8 B804000000              mov eax, 4
   213 000001DD BB01000000              mov ebx, 1
   214 000001E2 B9[00000000]            mov ecx, negative_error
   215 000001E7 BA16000000              mov edx, 22
   216 000001EC CD80                    int 0x80
   217 000001EE E8A5FFFFFF              call print_error_newline
   218 000001F3 EB38                    jmp exit_program
   219                                 
   220                                 div_zero_output:
   221 000001F5 B804000000              mov eax, 4
   222 000001FA BB01000000              mov ebx, 1
   223 000001FF B9[00000000]            mov ecx, div_zero_error
   224 00000204 BA17000000              mov edx, 23
   225 00000209 CD80                    int 0x80
   226 0000020B E888FFFFFF              call print_error_newline
   227 00000210 EB1B                    jmp exit_program
   228                                 
   229                                 overflow_output:
   230 00000212 B804000000              mov eax, 4
   231 00000217 BB01000000              mov ebx, 1
   232 0000021C B9[00000000]            mov ecx, overflow_error
   233 00000221 BA0F000000              mov edx, 15
   234 00000226 CD80                    int 0x80
   235 00000228 E86BFFFFFF              call print_error_newline
   236 0000022D EBFE                    jmp exit_program
   237                                 
   238                                 exit_program:
   239                                 
   240 0000022F 48C7C03C000000          mov rax, SYS_exit
   241 00000236 48C7C700000000          mov rdi, EXIT_SUCCESS
   242 0000023D 0F05                    syscall
   243                                 
