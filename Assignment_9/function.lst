     1                                 %line 1+1 function.asm
     2                                 
     3                                 
     4                                 
     5                                 
     6                                 
     7                                 
     8                                 
     9                                 
    10                                 
    11                                 
    12                                 
    13                                 
    14                                 
    15                                 
    16                                 
    17                                 
    18                                 
    19                                 
    20                                 
    21                                 
    22                                 
    23                                 
    24                                 
    25                                 
    26                                 
    27                                 
    28                                 
    29                                 
    30                                 
    31                                 
    32                                 
    33                                 
    34                                 
    35                                 
    36                                 
    37                                 
    38                                 
    39                                 
    40                                 
    41                                 
    42                                 
    43                                 
    44                                 
    45                                 
    46                                 
    47                                 
    48                                 
    49                                 
    50                                 
    51                                 
    52                                 
    53                                 
    54                                 
    55                                 
    56                                 
    57                                 
    58                                 
    59                                 
    60                                 
    61                                 
    62                                 
    63                                 
    64                                 
    65                                 
    66                                 
    67                                 
    68                                 
    69                                 
    70                                 
    71                                 
    72                                 
    73                                 
    74                                 
    75                                 
    76                                 
    77                                 
    78                                 
    79                                 
    80                                 
    81                                 
    82                                 
    83                                 
    84                                 
    85                                 
    86                                 
    87                                 
    88                                 
    89                                 
    90                                 
    91                                 
    92                                 
    93                                 
    94                                 
    95                                 
    96                                 %line 102+1 function.asm
    97                                 
    98                                 %line 110+1 function.asm
    99                                 
   100                                 [section .bss]
   101 00000000 <gap>                  buffer resb 4
   102 00000004 <gap>                  n resd 1
   103 00000008 <gap>                  sumN resd 1
   104 0000000C <gap>                  ascii resb 10
   105                                 
   106                                 [section .data]
   107                                 LF equ 10
   108                                 NULL equ 0
   109                                 SYS_exit equ 60
   110                                 EXIT_SUCCESS equ 0
   111 00000000 496E7075742061206E-    msg1 db "Input a number (004~999): "
   112 00000000 756D62657220283030-
   113 00000000 347E393939293A20   
   114 0000001A 31202B2032202B2033-    msg2 db "1 + 2 + 3 +...+ "
   115 0000001A 202B2E2E2E2B20     
   116 0000002A 203D2000               msg3 db " = ", NULL
   117                                 
   118                                 [section .text]
   119                                 [global _start]
   120                                 _start:
   121 00000000 48C7C001000000          mov rax, 1
   122                                 %line 129+0 function.asm
   123 00000007 48C7C701000000          mov rdi, 1
   124 0000000E 48C7C6[00000000]        mov rsi, msg1
   125 00000015 48C7C21A000000          mov rdx, 26
   126 0000001C 0F05                    syscall
   127                                 %line 130+1 function.asm
   128 0000001E 48C7C000000000          mov rax, 0
   129                                 %line 130+0 function.asm
   130 00000025 48C7C700000000          mov rdi, 0
   131 0000002C 48C7C6[00000000]        mov rsi, buffer
   132 00000033 48C7C204000000          mov rdx, 4
   133 0000003A 0F05                    syscall
   134                                 %line 131+1 function.asm
   135 0000003C 48C7C3[00000000]        mov rbx, buffer
   136 00000043 E8B5000000              call toInteger
   137                                 
   138                                 
   139 00000048 48C7C600000000          mov rsi, 0
   140 0000004F E8E1000000              call toRestore
   141                                 
   142                                 
   143 00000054 48C7C100000000          mov rcx, 0
   144 0000005B 8B3C25[00000000]        mov edi, dword[n]
   145 00000062 E8E0000000              call calculate
   146                                 
   147                                 
   148 00000067 48C7C103000000          mov rcx, 3
   149 0000006E 8B3C25[00000000]        mov edi, dword[sumN]
   150 00000075 E8DB000000              call toString
   151                                 
   152                                 
   153 0000007A 48C7C001000000          mov rax, 1
   154                                 %line 149+0 function.asm
   155 00000081 48C7C701000000          mov rdi, 1
   156 00000088 48C7C6[00000000]        mov rsi, msg2
   157 0000008F 48C7C210000000          mov rdx, 16
   158 00000096 0F05                    syscall
   159                                 %line 150+1 function.asm
   160 00000098 48C7C001000000          mov rax, 1
   161                                 %line 150+0 function.asm
   162 0000009F 48C7C701000000          mov rdi, 1
   163 000000A6 48C7C6[00000000]        mov rsi, buffer
   164 000000AD 48C7C203000000          mov rdx, 3
   165 000000B4 0F05                    syscall
   166                                 %line 151+1 function.asm
   167 000000B6 48C7C001000000          mov rax, 1
   168                                 %line 151+0 function.asm
   169 000000BD 48C7C701000000          mov rdi, 1
   170 000000C4 48C7C6[00000000]        mov rsi, msg3
   171 000000CB 48C7C203000000          mov rdx, 3
   172 000000D2 0F05                    syscall
   173                                 %line 152+1 function.asm
   174 000000D4 48C7C001000000          mov rax, 1
   175                                 %line 152+0 function.asm
   176 000000DB 48C7C701000000          mov rdi, 1
   177 000000E2 48C7C6[00000000]        mov rsi, ascii
   178 000000E9 48C7C207000000          mov rdx, 7
   179 000000F0 0F05                    syscall
   180                                 %line 153+1 function.asm
   181                                 
   182 000000F2 48C7C03C000000          mov rax, SYS_exit
   183 000000F9 48C7C700000000          mov rdi, EXIT_SUCCESS
   184 00000100 0F05                    syscall
   185                                 
   186                                 
   187                                 toInteger:
   188 00000102 48C7C000000000          mov rax, 0
   189 00000109 48C7C70A000000          mov rdi, 10
   190 00000110 48C7C600000000          mov rsi, 0
   191                                 next0:
   192 00000117 8024330F                and byte[rbx+rsi], 0f
   193 0000011B 020433                  add al, byte[rbx+rsi]
   194 0000011E 80D400                  adc ah, 0
   195 00000121 4883FE02                cmp rsi, 2
   196 00000125 7400                    je skip0
   197 00000127 F7E7                    mul edi
   198                                 skip0:
   199 00000129 48FFC6                  inc rsi
   200 0000012C 4883FE03                cmp rsi, 3
   201 00000130 7CE3                    jl next0
   202 00000132 890425[00000000]        mov dword[n], eax
   203 00000139 C3                      ret
   204                                 
   205                                 toRestore:
   206 0000013A 8A0433                  mov al, byte[rbx+rsi]
   207 0000013D 0C30                    or al, 30
   208 0000013F 880433                  mov byte[rbx+rsi], al
   209 00000142 48FFC6                  inc rsi
   210 00000145 4883FE03                cmp rsi, 3
   211 00000149 7CED                    jl toRestore
   212 0000014B C3                      ret
   213                                 
   214                                 
   215                                 calculate:
   216                                 next1:
   217 0000014C 010C25[00000000]        add dword[sumN], ecx
   218 00000153 FFC1                    inc ecx
   219 00000155 39F9                    cmp ecx, edi
   220 00000157 76F1                    jbe next1
   221 00000159 C3                      ret
   222                                 
   223                                 
   224                                 toString:
   225                                 
   226 0000015A 8B0425[00000000]        mov eax, dword[sumN]
   227 00000161 48C7C100000000          mov rcx, 0
   228 00000168 BB0A000000              mov ebx, 10
   229                                 divideLoop:
   230 0000016D BA00000000              mov edx, 0
   231 00000172 F7F3                    div ebx
   232 00000174 52                      push rdx
   233 00000175 48FFC1                  inc rcx
   234 00000178 83F800                  cmp eax, 0
   235 0000017B 75EE                    jne divideLoop
   236                                 
   237                                 
   238 0000017D 48C7C3[00000000]        mov rbx, ascii
   239 00000184 48C7C700000000          mov rdi, 0
   240                                 popLoop:
   241 0000018B 58                      pop rax
   242 0000018C 0430                    add al, "0"
   243 0000018E 88043B                  mov byte [rbx+rdi], al
   244 00000191 48FFC7                  inc rdi
   245 00000194 E2F3                    loop popLoop
   246 00000196 C6043B0A                mov byte [rbx+rdi], 10
   247 0000019A C3                      ret
